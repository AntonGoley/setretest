package ru.crystals.set10.pages.operday.cashes;



import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openqa.selenium.*;

import static ru.crystals.set10.utils.FlexMediator.*;


/*
 * Страница создания нового ручного документа главной кассы ПКО/РКО
 */
public class  MainCashManualDocPage extends CashesPage{
	
	private static final String BUTTON_SAVE_CHANGES = "id:saveChangesButton";
	private static final String BUTTON_BACK_TO_MAINCASH = "id:backButton";
	private static final String BUTTON_SELECT_DATE = "label:Выбрать дату";
	private static final String LOCATOR_EDIT_DOC_FORM = "id:documentForm/className:HBox";
	private static final String DOCTYPE_COMBOBOX = "id:docSubTypeComboBox";
	
	public static final String FIELD_DOC_NUMBER = "Номер документа";
	public static final String FIELD_DATE_OPERDAY = "Операционный день";
	public static final String FIELD_DATE_CREATE = "Дата и время создания документа";
	public static final String FIELD_AUTHOR = "Автор";
	public static final String FIELD_HEAD_ACCOUNTANT = "Главный бухгалтер ФИО";
	public static final String FIELD_PERSON_RECEIVED = "Получил ФИО";
	public static final String FIELD_RECEIVED_FROM = "Принято от ФИО";
	public static final String FIELD_PERSON_GIVE_TO= "Выдать ФИО";
	public static final String FIELD_DOC_SUM = "Сумма документа";
	public static final String FIELD_CODE_DEBET = "Дебет - код операции";
	public static final String FIELD_CODE_CREDIT = "Кредит - код операции";
	public static final String FIELD_COMMENTS = "Комментарии";
	
	private static final String LOCATOR_DOCUMENT_SAVED = "id:savedMsgLabel";
	
	/*
	 * Инкассация торговой выручки
	 */
	public static final String FIELD_ENCASHMENT_BANKNOTE_5000 = "Купюр 5000 р.";
	public static final String FIELD_ENCASHMENT_BANKNOTE_1000 = "Купюр 1000 р.";
	public static final String FIELD_ENCASHMENT_BANKNOTE_500 = "Купюр 500 р.";
	public static final String FIELD_ENCASHMENT_BANKNOTE_100 = "Купюр 100 р.";
	public static final String FIELD_ENCASHMENT_BAG_NUMBER= "Номер инкассаторской сумки";
	
	
	/* HBox - parent, в котором лежит поле для ввода значения (текстовое, дата) */
	private static final String HBOX_REGEXP = "HBox(\\d+)"; 
	Pattern pattern = Pattern.compile(HBOX_REGEXP);
	
	public MainCashManualDocPage(WebDriver driver) {
		super(driver);
	}
	
	public MainCashManualDocPage saveChanges(){
		doFlexMouseDown(getDriver(), ID_OPERDAYSWF, BUTTON_SAVE_CHANGES);
		clickElement(getDriver(), ID_OPERDAYSWF, BUTTON_SAVE_CHANGES);
		waitForElementVisible(getDriver(), ID_OPERDAYSWF, LOCATOR_DOCUMENT_SAVED);
		waitSpinner(ID_OPERDAYSWF);
		return this;
	}
	
	private String getParentElement(String textField){
		Matcher matcher = pattern.matcher(getElementProperty(getDriver(), ID_OPERDAYSWF, String.format("className:Label;text:%s", textField), "parent"));
		matcher.find();
		//log.info(matcher.group());
		return matcher.group() + "/";
	}
	
	/* 
	 * установить значение текстового поля
	 */
	public MainCashManualDocPage setTextField(String textField, String value){
		/*
		 * Локатор для поля Комментарий
		 */
		String textInputLocator = "FocusedTextInput";
		if (textField.equals(FIELD_COMMENTS)) {
			textInputLocator = "FocusedTextArea";
		}
		
		/*
		 * Локатор для купюр
		 */
		if (textField.contains("Купюр")) {
			textInputLocator = "ExNumberInput";
		}
		
		
		
		typeText(getDriver(), ID_OPERDAYSWF, "name:" + getParentElement(textField) + String.format("className:%s", textInputLocator), value);
		doFlexProperty(getDriver(), 
				ID_OPERDAYSWF, 
				"name:" + getParentElement(textField) + String.format("className:%s", textInputLocator), 
				new String[]{"text", value});
		log.info("Установлено значение поля " + textField + ": " + value);
		return this;
	}
	
	public String getTextField(String textField){
		/*
		 * Локатор отличается для поля Комментарий
		 */
		String textInputLocator = "FocusedTextInput";
		if (textField.equals(FIELD_COMMENTS)) {
			textInputLocator = "FocusedTextArea";
		}
		
		return getElementProperty(getDriver(), ID_OPERDAYSWF, "name:" + getParentElement(textField) + String.format("className:%s", textInputLocator), "text");
	}
	
	
	
	public String getAutogeneratedFieldValue(String textField){
		/* поле Дата и время создание не такое, как остальные*/
		if (textField.equals(FIELD_DATE_CREATE)) {
			return getElementProperty(getDriver(), ID_OPERDAYSWF, "name:" + getParentElement(textField) + "className:DateViewer", "text");	
		}
		
		return getElementProperty(getDriver(), ID_OPERDAYSWF, "name:" + getParentElement(textField) + "className:Label|1", "text");		
	}
	
	
	/*
	 * формат даты: dd:mm:HH
	 */
	public MainCashManualDocPage setOperDayDate(String textField, String date){
		doFlexMouseDown(getDriver(), ID_OPERDAYSWF, "name:" + getParentElement(textField) + "className:Button");
		log.info("Создание документа на дату: " + date);
		typeText(getDriver(), ID_OPERDAYSWF, "className:ExDateInput/id:box1", date.split("\\.")[0]);
		typeText(getDriver(), ID_OPERDAYSWF, "className:ExDateInput/id:box2", date.split("\\.")[1]);
		typeText(getDriver(), ID_OPERDAYSWF, "className:ExDateInput/id:box3", date.split("\\.")[2]);
		
		doFlexMouseDown(getDriver(), ID_OPERDAYSWF, BUTTON_SELECT_DATE);
		doFlexMouseUp(getDriver(), ID_OPERDAYSWF, BUTTON_SELECT_DATE, true);
		return this;
	}
	
	public MainCashDocsPage backToMainCash(){
		clickElement(getDriver(), ID_OPERDAYSWF, BUTTON_BACK_TO_MAINCASH);
		waitSpinner(ID_OPERDAYSWF);
		return new MainCashDocsPage(getDriver());
	}
	
	/* 
	 * сколько полей редактирования докумена на форме 
	 */
	public int getFieldsEditCount(){
		return Integer.valueOf(
				getElementsNum(getDriver(), ID_OPERDAYSWF, LOCATOR_EDIT_DOC_FORM));
	}
	
	public MainCashManualDocPage selectDocType(String docType){
		log.info("Выбрать тип документа: " + docType);
		selectElement(getDriver(), ID_OPERDAYSWF, DOCTYPE_COMBOBOX, docType);
		return this;
	}
	
}
