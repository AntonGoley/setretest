package ru.crystals.set10.test.maincash;


import java.util.List;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import ru.crystals.set10.pages.operday.cashes.MainCashDoc;


/*
 * Создание автоматических документов при закрытии опердня
 */
@Test (groups= "retail")
public class MainCashAutoDocsCommonTest extends MainCashConfigTest {
	
	private Integer lkkExpectedNumber = -1;
	private Integer ddsExpectedNumber = -1;
	private Integer km7ExpectedNumber = -1;
	
	private MainCashDoc autoDoc;
	
	@BeforeClass
	public void setup(){
		MainCashConfigTool.clearLastAutoGeneratedDoc(MainCashDoc.DOC_TYPE_LKK);
		MainCashConfigTool.clearLastAutoGeneratedDoc(MainCashDoc.DOC_TYPE_KM7);
		MainCashConfigTool.clearLastAutoGeneratedDoc(MainCashDoc.DOC_TYPE_DDS);
		
		lkkExpectedNumber = MainCashConfigTool.getNexDocNumberForType(MainCashDoc.DOC_TYPE_LKK);
		ddsExpectedNumber = MainCashConfigTool.getNexDocNumberForType(MainCashDoc.DOC_TYPE_DDS);
		km7ExpectedNumber = MainCashConfigTool.getNexDocNumberForType(MainCashDoc.DOC_TYPE_KM7);
		
		MainCashConfigTool.makeShiftsGreenForDate(today);
		openMainDocsPage();
		docs.reopenOperDayAndSwitchBack(today);
	}
	
	@DataProvider(name = "docTypes")
	public Object[][] setDocTypes(){
		return new Object[][]{
				{MainCashDoc.DOC_TYPE_LKK, lkkExpectedNumber},
				{MainCashDoc.DOC_TYPE_DDS, ddsExpectedNumber},
				{MainCashDoc.DOC_TYPE_KM7, km7ExpectedNumber}
		};
	}
	
	
	@Test (priority=1,
			dataProvider = "docTypes")
	public void testNoDocsAfterConfiguration(String docType) throws Exception {
		Assert.assertTrue(docs.getDocByType(docType).isEmpty(), "Документ " + docType + " не должен существовать на текущую дату перед началом теста!");
		
		/*TODO: пренести в тест testLKKCreatedOnODClose*/
		/* отправить чек и Z-отчет*/
		cashEmulator.nextPurchase();
		cashEmulator.nextZReport(1000L, 2000L);
		
		docs.closeOperdayAndSwitchBack(today);
		docs.getDocsOnPage();
	}
	
	@Test( 	priority = 1, dependsOnMethods = "testNoDocsAfterConfiguration",
			dataProvider = "docTypes",
			description = "Формирование автоматических документов при закрытии ОД")
	public void testLKKCreatedOnODClose(String doctype) throws Exception{
		Assert.assertTrue(docs.getDocByType(doctype).size()==1, "Документ " + doctype + " не создался после закрытия опердня");
	}
	
	@Test(  priority = 2, dataProvider = "docTypes",
			description = "Номер автоматического документа формируется с учетом нумерации внутритипа")
	public void testLKKNumber(String doctype, Integer docNumber) throws Exception{
		autoDoc = docs.getDocByType(doctype).get(0);
		Assert.assertEquals(autoDoc.getNumber(),
				docNumber,
				"Неверно сгенерился номер документа");
	}
	
	@Test( enabled=false,
			priority = 2,
			description = "Автоматический документ не доступен для редактирования")
	public void testLKKUnableToEdit(){
	}
	
	@Test( enabled=false, priority = 3,
			description = "Автоматический документ переходит в серый статус, если опердень был переоткрыт")
	public void testDocStatusIfOdReopened(String doctype) throws Exception{
	}
	
	@Test( priority = 3, enabled=false,
			description = "Автоматический документ невозможно распечатать, если ОД был переоткрыт")
	public void testDocUnableToPrintIfOdReopened(String doctype) throws Exception{
		//docs.reopenOperDayAndSwitchBack(today);
		autoDoc = docs.getDocByType(doctype).get(0);
		Assert.assertFalse(autoDoc.getPrinable(),  "Документ не должен быть доступен для печати, если ОД не закрыт!");
	}

}
